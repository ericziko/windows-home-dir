"use strict";
/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signInToTenant = void 0;
const vscode = require("vscode");
const getUnauthenticatedTenants_1 = require("./utils/getUnauthenticatedTenants");
/**
 * Prompts user to select from a list of unauthenticated tenants.
 * Once selected, requests a new session from VS Code specifially for this tenant.
 */
function signInToTenant(subscriptionProvider) {
    return __awaiter(this, void 0, void 0, function* () {
        const tenantId = yield pickTenant(subscriptionProvider);
        if (tenantId) {
            yield subscriptionProvider.signIn(tenantId);
        }
    });
}
exports.signInToTenant = signInToTenant;
function pickTenant(subscriptionProvider) {
    return __awaiter(this, void 0, void 0, function* () {
        const pick = yield vscode.window.showQuickPick(getPicks(subscriptionProvider), {
            placeHolder: 'Select a Tenant (Directory) to Sign In To',
            matchOnDescription: true,
            ignoreFocusOut: true,
        });
        return pick === null || pick === void 0 ? void 0 : pick.tenant.tenantId;
    });
}
function getPicks(subscriptionProvider) {
    return __awaiter(this, void 0, void 0, function* () {
        const unauthenticatedTenants = yield (0, getUnauthenticatedTenants_1.getUnauthenticatedTenants)(subscriptionProvider);
        const duplicateTenants = new Set(unauthenticatedTenants
            .filter((tenant, index, self) => index !== self.findIndex(t => t.tenantId === tenant.tenantId))
            .map(tenant => tenant.tenantId));
        const isDuplicate = (tenantId) => duplicateTenants.has(tenantId);
        const picks = unauthenticatedTenants
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            .sort((a, b) => (a.displayName).localeCompare(b.displayName))
            .map(tenant => {
            var _a, _b;
            return ({
                label: (_a = tenant.displayName) !== null && _a !== void 0 ? _a : '',
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                description: `${tenant.tenantId}${isDuplicate(tenant.tenantId) ? ` (${tenant.account.label})` : ''}`,
                detail: (_b = tenant.defaultDomain) !== null && _b !== void 0 ? _b : '',
                tenant,
            });
        });
        return picks;
    });
}
//# sourceMappingURL=signInToTenant.js.map